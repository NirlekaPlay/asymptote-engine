Project Asymptote Engine Design Document

1. Suspicion Status. (a) Suspicion statuses are statuses of a
Player that affects their detection and Agents' reaction
upon detecting them.

 (b) Here are a list of suspicion statuses, listed from lower
     priority to higher priority.

        i. Disguised;
       ii. Minor Trespassing;
      iii. Minor Suspicous;
       iv. Major Trespassing;
        v. Criminal Suspicious; and
       vi. Armed.

 (c) These statuses can be stacked as a Player can perform more
than one. e.g. `{ statuses: { "DISGUISED", "ARMED"} }`.

2. Detection. One of the core mechanics of Asymptote Engine
is detection. Agents and Cameras can detect a Player or any
other detectable entities which includes but not limited to
weapons, dead bodies, hostages, and damaged property.

 a. Detection Time. Is the amount of time a suspicion value
    reaches 1.0. Which can be expressed by:
   `FinalDetectionTime = BaseTime รท SpeedModifier %`
 b. Detection Priority. As defined in Sec. 1, the speed of
    detection and how an Agent reacts upon detection is de-
    termined by the Player's highest priority status.
 c. Detection Visibility. Most statuses requires visibility
    such as ARMED, SUSPICIOUS, etc. And some can be heard,
    such as MINOR_TRESPASSING and MAJOR_TRESPASSING. An Agent
    determines the highest priority status by their visibility.
    For example, a Player is walking behind an Agent, with the
    statuses of MINOR_TRESPASSING and ARMED. Since the Agent
    cannot see the Player, the Agent detects the Player based
    on the MINOR_TRESPASSING status.
 d. Detection Registry. Each Agent stores the suspicion map
    that stores the suspicion value of each suspect.
    e.g. `{ Jimmy: 0.23, DeadBody: 0.97 }`
 e. Curious State. When a suspect's suspicion value reaches
    a specific threshold, e.g. 60%, then the detecting
    Agent might stop for whatever they are doing. turn and
    focuses on whatever they are detecting. And remain in
    curious state until they stop detecting anything for 2
    seconds. However, they will not enter a curious state
    if they are already investigating or reporting
    something.

2. Patrolling. A Guard can have a patrolling duty. A map or level has posts, each posts are grouped so that
specific Guards can only patrol around their designated posts.

Each posts contains information, which includes the position, of course, the facing direction, tells the Guard
once in a post to face what direction, and if its occupied or not.
e.g. `{ cframe: CFrame, occupied: boolean }` (CFrames can have both position and orientation so thats handy)

A Guard typical routine for patrolling are:

 a. If the Guard is not on any posts, it tries to randomly find one designated under them. It checks if those
    posts are occupied or not. If it is occupied, keep searching. If it finds a post thats unoccupied, then
    it sets said post as occupied and begins to walk to it.
 b. Once a Guard is on a post, it waits for a random time, and after thats done, it tries to find an unoccupied
    post designated under them. If it does not find one, stays there until it does. Once it does find one,
    release the current post and sets the selected post as occupied, and walks to it. And the cycle repeats.
 c. A Guard may release a post under certain circumstances, which includes, but not limited to:

     i. A Guard becomes alerted.

3. Trespassing. Trespassing can be split to 2 classifications:

 a. Minor Trespassing.
 b. Major Trespassing.

Trespassing status is affected by a Player's disguise. e.g. An undisguised Player is in an
employees-only area. This gives the Player a Minor Trespassing status. If the Player is in a more
restricted area such as security rooms, then it gives the Player a Major Trespassing status.

If a Player wears a disguise, then Minor Trespassing zones will not give them its status. And 
Major Trespassing zones will now give them Minor Trespassing status.

4. Questioning and Chasing. If a Player is caught in a Minor Trespas-
sing zone, it will result in the following outcomes:

 a. The Player is close to the Guard. If true, the Guard will immedi-
    ately question the Player.
 b. The player is far away or fleeing. If true, the Guard will chase
    the Player. And if close enough, goes to 4(a).
 c. The Player is out of sight. If true, the Guard will sprint towards
    the last known position the Player was caught. And if the Player
    is on sight again, goes to 4(b). If not, the Guard will go to a
    random Post starting from the ones in its direction.

      i. If a specific amount of time has passed without success, the
         Guard gives up and raises the alert level.
     ii. If the Player is SEEN exiting the trespassing zone then the
         Guard will return to its original state.
    iii. Note that during this state, higher priority events mat inte-
         rrupt this state, such as an armed player.


