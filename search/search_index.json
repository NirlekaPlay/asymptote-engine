{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Asymptote Engine Documentation","text":"<p>Welcome to the Asymptote Engine documentation site!</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"contributing/conventions/","title":"Bugs","text":"<p>If you believe to have found a bug in any of our games using the Engine that is related to the Engine itself, please open a GitHub issue. It helps if you also include the engine version where the bug happened.</p>"},{"location":"contributing/conventions/#contributing","title":"Contributing","text":""},{"location":"contributing/conventions/#naming-conventions","title":"Naming Conventions","text":"<p>Our project primarily follows Java naming conventions as a foundation for consistency across code and assets.</p>"},{"location":"contributing/conventions/#directories","title":"Directories","text":"<p>Directory names should use all lowercase letters. Example: <code>server</code>, <code>client</code>, <code>alertlevel</code></p>"},{"location":"contributing/conventions/#scripts","title":"Scripts","text":"<ul> <li>Luau scripts must use the <code>.lua</code> file extension.</li> <li>Client, server, and module scripts should follow UpperCamelCase.   Examples: <code>Brain.lua</code>, <code>JoinServerLobbies.server.lua</code>, <code>Detection.client.lua</code></li> </ul>"},{"location":"contributing/conventions/#roblox-files","title":"Roblox Files","text":"<ul> <li>Roblox instances (e.g., ScreenGuis, sounds) should use the <code>.rbxmx</code> file extension, which is XML-based.</li> <li>Asset files, such as sounds, should use lower_snake_case.   Example: <code>detected_sound.rbxmx</code></li> <li>Other Roblox files, such as GUIs, should use UpperCamelCase.   Example: <code>DetectionGui.rbxmx</code></li> </ul>"},{"location":"contributing/conventions/#scripting-naming-conventions-nirlekas-rant","title":"Scripting Naming Conventions: Nirleka's Rant","text":""},{"location":"contributing/conventions/#classes-interfaces-and-types","title":"Classes, Interfaces, and Types","text":"<p>Classes, interfaces, and types should use UpperCamelCase. Use whole words and must avoid acronyms and abbreviations.</p> <pre><code>local BrainDebugRenderer = {}\n</code></pre> <pre><code>local Entity = {}\nEntity.__index = Entity\n</code></pre> <pre><code>export type Sensor&lt;T&gt; = {\n    doUpdate: ( self: Sensor&lt;T&gt; , agent: T, deltaTime: number) -&gt; ()\n}\n</code></pre>"},{"location":"contributing/conventions/#functions-and-methods","title":"Functions and Methods","text":"<p>Functions and methods should be verbs and use lowerCamelCase.</p> <pre><code>function Brain.setMemoryInternal&lt;T, U&gt;(self: Brain&lt;T&gt;, memoryType: MemoryModuleType&lt;U&gt;, optional: Optional&lt;ExpireableValue&lt;U&gt;&gt;): ()\n    if self.memories[memoryType] then\n        if optional:isPresent() and isEmptyTable(optional:get():getValue()) then\n            self:eraseMemory(memoryType)\n        else\n            self.memories[memoryType] = optional\n        end\n    end\nend\n</code></pre>"},{"location":"contributing/conventions/#variables","title":"Variables","text":"<p>Variables should be descriptive, and use lowerCamelCase.</p> <pre><code>local lastDetectionValue = 10\n</code></pre> <p>And I swear to God, DO NOT ABREVIATE.</p> <pre><code>local larm\nlocal rarm\nlocal lleg\nlocal rleg\nlocal head\nlocal torso\nlocal hrp\n</code></pre> <p>Look at this monstorsity. You can not understand jackshit. When you write code, always assume that there will be a poor soul that is gonna read, understand, and refactor your code.</p> <p>The good way to do is:</p> <pre><code>local leftArm: BasePart\nlocal rightArm: BasePart\nlocal leftLeg: BasePart\nlocal rightLeg: BasePart\nlocal head: BasePart\nlocal torso: BasePart\nlocal humanoidRootPart: BasePart\n</code></pre> <p>Oh now my eyes won't cry anymore. Now I can easily understand what the hell the variables means and do.</p> <p>Oh and also, since these are not set immediately, ALWAYS ADD A SPECIFIC TYPE. This does not include variables where the type is obvious. Such as:</p> <pre><code>local deltaTime = 0.5\n</code></pre> <p>We already know what the hell deltaTime is. A number. However, if a variable is not set immediately:</p> <pre><code>local detectedEntity\n</code></pre> <p>Now we know jackshit on what the hell \"detectedEntity\" supposed to be. Sure, you're gonna set it SOMEWHERE but that adds extra suffering.</p> <p>Even if the name is somewhat obvious, You should always add a type.</p> <pre><code>local detectedEntity: Entity\n</code></pre> <p>This applies to tables as well.</p> <pre><code>local entitiesByUuid = {}\n</code></pre> <p>What the fuck does this supposed to store? Sure we immediately set it to a table, but that tells us jackshit on what it's supposed to be storing.</p> <p>Adding a type provides clarity.</p> <pre><code>local entitiesByUuid: { [string]: Entity } = {}\n</code></pre> <p>This also won't leave the type checker to slap in you in the face when trying to set a value to a table.</p> <p>Now you might be saying \"But nir#1! What if I need to change the variable's type-\" NO. Variables should store only ONE type. ONE. What circumstances where variable need to change multiple types of data???? Thats just stupid! This applies to tables as well! Do not have a goddamn table which stores multiple types of data!</p>"},{"location":"contributing/conventions/#comments","title":"Comments","text":"<p>Comments are either tools for developers to tell other developers what a piece of code does, or a way for a developer to vent.</p> <pre><code>--[=[\n    If a value is present, returns the value, otherwise returns `other`, which may be `nil`.\n]=]\nfunction Optional.orElse&lt;T, U&gt;(self: Optional&lt;T&gt;, other: U): T | U\n    -- I SWEAR TO GOD THE TYPECHECKER WONT STFU\n    return if (self.value :: any) ~= nil then self.value else other\nend\n</code></pre> <p>Oh, the contrast. The documentation comment everyone sees when they hover their little mouse over the method. Clean. Elegant. The person using the method will think the code is all sunshine and rainbows. Until you get to the comments inside the method.</p> <p>Yes. It is acceptable to vent your frusterations and rage. Infact, its MANDATORY.</p>"},{"location":"contributing/conventions/#constants","title":"Constants","text":"<p>For the love of all that is holy, please do not write magic numbers, or any other hard-coded values. Do not, and I mean under no godforsaken circumstance\u2014write magic numbers in your code.</p> <p>You know what I'm talking about. Those random little gremlins like <code>42</code>, <code>0.37</code>, or <code>69</code> (nice) that you sprinkle into your logic because \"you'll remember what it means later.\" You won't. You never will. Future you will stare at it six months from now, dead-eyed, wondering which past-life version of yourself thought <code>0.73</code> was a perfectly reasonable value for \"ghost spawn offset.\"</p> <p>For example:</p> <pre><code>function DeanHaunt.spawnBehindPlayerIfPossible(rootPart: BasePart): ()\n    -- ...\n\n    local spawnDistance = rng:NextNumber(MIN_SPAWN_DISTANCE, MAX_SPAWN_DISTANCE)\n\n    -- ...\nend\n</code></pre> <p>See that? That's clean. That's readable. That's merciful. Someone can open this file, see <code>MIN_SPAWN_DISTANCE</code> and <code>MAX_SPAWN_DISTANCE</code>, and actually have a fighting chance of figuring out what the hell is going on. That's civilization right there.</p> <p>Now imagine this instead:</p> <pre><code>local spawnDistance = rng:NextNumber(7.5, 13.25)\n</code></pre> <p>Congratulations, you've just created a mystery novel no one asked for. What's 7.5? What's 13.25? Are those meters? Studs? The number of brain cells you lost debugging this later? No one knows. Every developer who encounters it loses a little sanity reading it.</p>"},{"location":"level/level-setup/","title":"Level","text":""},{"location":"level/level-setup/#folder-structure","title":"Folder Structure","text":"<p>In order for your levels, or missions to work, you need to set up your workspace.</p> <p>In <code>workspace</code>\u00a0make sure you have a <code>Folder</code> named <code>Level</code> with this folder structure:</p> <pre><code>.\n\u251c\u2500\u2500 Barrier (Folder)\n\u251c\u2500\u2500 Npcs (Folder)\n\u251c\u2500\u2500 Cells (Folder)\n\u251c\u2500\u2500 Geometry (Folder)\n\u251c\u2500\u2500 Glass (Folder)\n\u251c\u2500\u2500 MissionSetup (ModuleScript)\n\u251c\u2500\u2500 Nodes (Folder)\n\u2514\u2500\u2500 Props (Folder)\n</code></pre> <p>I will explain what each folder does.</p>"},{"location":"level/level-setup/#barrier","title":"Barrier","text":"<p>All <code>Part</code>s who are descendants of this folder will act as, well, barriers!<p> In-game, they will become invisible and collides with players, but any other game objects such as NPCs do not. Make sure to keep these parts anchored.</p> <p>Traversal</p> <p>Keep in mind that the engine does a depth-first-search traversal. When traversing this folder, it will skip instances that are not <code>Folder</code>s. This means any Parts inside a <code>Model</code>, other <code>Part</code>s, or any other instances that are not <code>Folder</code>s will not be proccessed.</p>"},{"location":"level/level-setup/#npcs","title":"Npcs","text":"<p>Info</p> <p>This folder can be named either <code>Npcs</code> or <code>Bots</code>, and it will work the same.</p> <p>What's a stealth game without its NPCs? This is where you store your custom NPCs that will be spawned in-game. They are represented as <code>BoolValue</code>s or <code>Configuration</code> instances, and their behaviors and appearance are configured by their attributes.</p> <p>Only traverses <code>Folder</code>s.</p>"},{"location":"level/level-setup/#attributes","title":"Attributes","text":""},{"location":"level/level-setup/#charname-string","title":"<code>CharName</code> (string)","text":"<p>A non-unique name that is used in NPC dialogues. For example, if a guard founds a another guard with the <code>CharName</code> attribute set to \"Kelly\", then the guard will say \"Control! Someone took down Kelly!\"</p>"},{"location":"level/level-setup/#nodes-string","title":"<code>Nodes</code> (string)","text":"<p>This is the name of a <code>Folder</code> that can be found inside the <code>Nodes</code> folder. This is what the engine use to randomly spawn the NPC on the defined nodes and what the NPC uses where to walk.</p> <p>For NPCs with patrolling behaviors, such as guards, these nodes act like 'posts.' They will choose a seemingly random node, walk towards it, stay on it for a random time, then choose another node.</p> <p>Info</p> <p>If you are using your nodes for NPCs who patrols, the node's <code>CFrame.LookVector</code> (positive Z-axis) will be used for the NPCs to turn to when they arrive and stay at the node.</p> <p>Note</p> <p>If you have a node structure like this:</p> <pre><code>.\n\u2514\u2500\u2500 Upstairs (Folder)\n    \u251c\u2500\u2500 FirstFloor (Folder)\n    \u2502   \u251c\u2500\u2500 Node (Part)\n    \u2502   \u251c\u2500\u2500 Node (Part)\n    \u2502   \u251c\u2500\u2500 Node (Part)\n    \u2514\u2500\u2500 SecondFloor (Folder)\n        \u251c\u2500\u2500 Node (Part)\n        \u251c\u2500\u2500 Node (Part)\n        \u2514\u2500\u2500 Node (Part)\n</code></pre> <p>And your <code>Nodes</code> attributes is set to '<code>Upstairs</code>' then it will also include the nodes of '<code>FirstFloor</code>' and '<code>SecondFloor</code>'.</p>"},{"location":"level/level-setup/#cells","title":"Cells","text":"<p>Cells or Zones are an important part of missions. Currently, they are used to check if a player is trespassing and what status to give them.</p> <p>Cells must be a <code>Model</code>\u00a0containing atleast 1 <code>Floor</code> and 1 <code>Roof</code> which are both <code>BasePart</code>s. This is what the engine use to determine if a point in space is \"inside\" a cell, which is when said point is BETWEEN a <code>Floor</code>\u00a0and <code>Roof</code> parts.</p>"},{"location":"level/level-setup/#geometry","title":"Geometry","text":"<p>This is where you store static level geometries.</p>"},{"location":"level/level-setup/#glass","title":"Glass","text":"<p>This is where you store glass parts. This feature currently does not exist. In the future, glass parts can be shot, broken, and see through for NPCs.</p>"},{"location":"level/level-setup/#nodes","title":"Nodes","text":"<p>Not to be confused with waypoints, nodes can be used for a variety of cases for NPCs, such as patrolling posts, and investigation areas. Nodes must be <code>BasePart</code>s, and you can place them around the map to your liking. Just make sure that NPCs can actually pathfind there.</p>"},{"location":"level/level-setup/#props","title":"Props","text":"<p>Oh boy. You will use this often. Props are either static assets represented with placeholders that are replaced with the actual prop asset during level initialization, or fully functional props. This section will be expanded.</p>"},{"location":"tutorials/disguises/","title":"Disguises","text":"<p>Disguises are relatively simple to add.</p>"},{"location":"tutorials/disguises/#missionsetup-fields","title":"<code>MissionSetup</code> fields","text":"<pre><code>CustomStrings = {\n    [\"name.disguise.custom\"] = \"Custom unfiform\",\n},\nCustomDisguises = {\n    CustomDisguise = {\n        Name = \"name.disguise.custom\",\n        BrickColor = BrickColor.Red(), -- Optional\n        Outfits = {\n            { 12069799, 12069812 }, -- Shirt and Pants\n        },\n    }\n}\n</code></pre>"},{"location":"tutorials/disguises/#using-a-custom-disguise-prompt","title":"Using a custom disguise prompt","text":"<p>For a custom disguise prompt, you can just create a part inside <code>Level/Props</code> (fig. 1.) and name it <code>DisguiseTrigger</code> and make sure to have an attribute of type <code>string</code> named <code>Disguise</code> that refers to the disguise name. In this case, we named it <code>CustomDisguise</code>.</p> <p>Note</p> <p>The part's local positive X-axis determines the direction the prompt will use. Make sure the positive X-axis points exactly where you want the prompt to face.</p> <p>In the <code>Outfits</code>\u00a0field is for the shirt and pants ID. The <code>BrickColor</code> field is for the character's limbs color when the disguise is applied to them.</p> Fig. 1. Disguise part with its axis shown. <p>Note</p> <p>To know if your <code>BasePart</code> is facing in the correct direction, select the Move tool in the Model tab, press on your disguise prompt part, and see if the X-axis is pointing in the right direction. Make sure that you are on local mode, which can be seen by the <code>L</code> text while you are selecting it. If you're not in local mode, press Ctrl+L if you are on Windows or Cmd+L if you are on Mac.</p>"},{"location":"tutorials/disguises/#using-specific-disguise-props","title":"Using specific disguise props","text":"<p>Only some props are able to give disguises. Namely <code>ClothingRack</code> and <code>LaundryBasket</code>, and they follow the same conventions, the placeholder part local positive X-axis must be in the correct direction, and have a <code>Disguise</code>\u00a0attribute to the placeholder.</p> Fig. 2. The clothing rack (left) and the laundry basket (right)"}]}